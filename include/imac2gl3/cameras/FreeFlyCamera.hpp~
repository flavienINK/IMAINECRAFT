#ifndef FREEFLYCAMERA_H
#define FREEFLYCAMERA_H

#include <iostream>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>

const double PI = std::atan(1.0)*4;

namespace imac2gl3 {
	class FreeFlyCamera {
		private:
			glm::vec3 m_fPosition; 
			float m_fPhi;
			float m_fTheta;
			glm::vec3 m_FrontVector;
			glm::vec3 m_LeftVector;
			glm::vec3 m_UpVector;


		public: 
			FreeFlyCamera():m_fPosition(0, 0, 0), m_fPhi(PI), m_fTheta(0) {computeDirectionVectors(); };
			void moveFront(float t);
			void moveLeft(float t);
			void rotateLeft(float degrees);
			void rotateUp(float degrees);
			glm::mat4 getViewMatrix() const;
			void computeDirectionVectors();
			void afficherCam(){std::cout<<"position : x :"<<m_fPosition.x<<" y : "<<m_fPosition.y<<" z : "<<m_fPosition.z<<std::endl<<"frontVector : ("<<m_FrontVector.x<<", "<<m_FrontVector.y<<", "<<m_FrontVector.z<<")"<<std::endl<<"upVector : ("<<m_UpVector.x<<", "<<m_UpVector.y<<", "<<m_UpVector.z<<")"<<std::endl<<"(Teta, phi) : ("<<m_fTheta<<", "<<m_fPhi<<zzssssssss")"<<std::endl;};

	

	};
}

#endif
