#include <cmath>
#include <vector>
#include <iostream>
#include "imac2gl3/shapes/common.hpp"
#include "imac2gl3/shapes/Cube.hpp"

namespace imac2gl3 {

void Cube::build(GLfloat size) {

    GLfloat rcpLat = 1.f / discLat, rcpLong = 1.f / discLong;
    GLfloat dPhi = 2 * PI * rcpLat, dTheta = PI * rcpLong;
    
    std::vector<ShapeVertex> data;
    
    // Construit l'ensemble des vertex
    for(GLsizei j = 0; j <= discLong; ++j) {
        GLfloat cosTheta = cos(-PI / 2 + j * dTheta);
        GLfloat sinTheta = sin(-PI / 2 + j * dTheta);
        
        for(GLsizei i = 0; i < discLat; ++i) {
            ShapeVertex vertex;
            
            vertex.texCoords.x = i * rcpLat;
            vertex.texCoords.y = j * rcpLong;
            
            vertex.normal.x = sin(i * dPhi) * cosTheta;
            vertex.normal.y = sinTheta;
            vertex.normal.z = cos(i * dPhi) * cosTheta;
            
            vertex.position = r * vertex.normal;
            
            data.push_back(vertex);
        }
    }

    m_nVertexCount = discLat * discLong * 6;
    m_pDataPointer = new ShapeVertex[m_nVertexCount];
    
    GLuint idx = 0;
    // Construit les vertex finaux en regroupant les données en triangles:
    // Pour une longitude donnée, les deux triangles formant une face sont de la forme:
    // (i, i + 1, i + discLat + 1), (i, i + discLat + 1, i + discLat)
    // avec i sur la bande correspondant à la longitude
    for(GLsizei j = 0; j < discLong; ++j) {
        GLsizei offset = j * discLat;
        for(GLsizei i = 0; i < discLat; ++i) {
            m_pDataPointer[idx] = data[offset + i];
            idx++;
            m_pDataPointer[idx] = data[offset + (i + 1) % discLat];
            idx++;
            m_pDataPointer[idx] = data[offset + discLat + (i + 1) % discLat];
            idx++;
            
            m_pDataPointer[idx] = data[offset + i];
            idx++;
            m_pDataPointer[idx] = data[offset + discLat + (i + 1) % discLat];
            idx++;
            m_pDataPointer[idx] = data[offset + i + discLat];
            idx++;
        }
    }
    
    // Attention ! dans cette implantation on duplique beaucoup de sommets. Une meilleur stratégie est de passer
    // par un Index Buffer Object, que nous verrons dans les prochains TDs
}

}
